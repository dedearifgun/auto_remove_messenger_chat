function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function findParentWithRoleRow(element) {
  while (element && element.getAttribute('role') !== 'row') {
    element = element.parentElement;
  }
  return element;
}

function openMenuFromRow(parentRow) {
  const gridCells = parentRow.querySelectorAll('div[role="gridcell"]');
  if (!gridCells[1]) return;
  const button = gridCells[1].querySelector("div[role=button]");
  if (button) {
    button.click();
    console.log("‚ãØ Menu dibuka");
  }
}

async function findMenuClickDelete() {
  let attempts = 0;
  while (attempts < 10) {
    const menuItems = [...document.querySelectorAll("div[role=menuitem]")];
    const target = menuItems.find(el => el.innerText.trim().includes("Hapus obrolan"));
    if (target) {
      target.click();
      console.log("‚úÖ Klik 'Hapus obrolan'");
      return true;
    }
    await delay(300);
    attempts++;
  }
  console.log("‚ùå Gagal menemukan 'Hapus obrolan'");
  return false;
}

function confirmDelete() {
  const allButtons = [...document.querySelectorAll('div[role=dialog] [role=button]')];
  const confirmButton = allButtons.find(btn =>
    btn.innerText.includes("Hapus") || btn.innerText.includes("Delete")
  );
  if (confirmButton) {
    confirmButton.click();
    console.log("üóëÔ∏è Konfirmasi hapus diklik");
  } else {
    console.log("‚ùå Tombol konfirmasi tidak ditemukan");
  }
}

async function scrollAndLoadMoreChats(count = 1000) {
  let previousHeight = 0;
  let attempts = 0;
  while (attempts < count) {
    window.scrollBy(0, 1000);
    await delay(1500);

    const currentHeight = document.body.scrollHeight;
    if (currentHeight === previousHeight) break;
    previousHeight = currentHeight;
    attempts++;
  }
}

async function deleteVisibleChats() {
  const allATags = document.querySelectorAll('a[href^="/messages/t/"]');
  const uniqueATags = [...new Set(allATags)];

  for (let i = 0; i < uniqueATags.length; i++) {
    const aTag = uniqueATags[i];
    const parentRow = findParentWithRoleRow(aTag);
    if (!parentRow) continue;

    console.log(`üîÅ Memproses chat ${i + 1} / ${uniqueATags.length}`);
    openMenuFromRow(parentRow);
    await delay(1500);

    const clicked = await findMenuClickDelete();
    if (clicked) {
      await delay(2000);
      confirmDelete();
      await delay(3000);
    } else {
      console.log("‚è© Skip, lanjut ke berikutnya");
    }

    await delay(2000);
  }

  return uniqueATags.length;
}

async function processAllChats() {
  let totalDeleted = 0;
  while (true) {
    await scrollAndLoadMoreChats();
    const deletedThisRound = await deleteVisibleChats();
    totalDeleted += deletedThisRound;
    console.log(`üßπ Total chat terhapus sejauh ini: ${totalDeleted}`);

    // Scroll lagi untuk load sisa chat
    await delay(3000);
    window.scrollBy(0, 2000);
    await delay(4000);

    // Deteksi jika tidak ada chat baru
    const newATags = document.querySelectorAll('a[href^="/messages/t/"]');
    if (newATags.length === 0) {
      console.log("‚úÖ Semua chat sudah diproses!");
      break;
    }
  }
}

processAllChats();
